{"version":3,"sources":["components/Catalog/AddProduct.jsx"],"names":["AddProductReduxForm","reduxForm","form","validate","props","handleSubmit","pristine","reset","submitting","error","fieldDescr","descName","className","styles","minDate","getStringDate","onSubmit","wholeForm","createField","TextArea","requiredField","acceptableName","maxLength200","Input","acceptablePrice","acceptableDiscount","acceptableDiscountEndDate","type","min","value","ImageField","imageFormat","imageWidth_200_4000","imageHeight_200_4000","mimeType","maxWidth","minHeight","minWidth","maxHeight","alt","formSummaryError","disabled","onClick","compose","withAuthRedirect","connect","state","isFetching","products","addProduct","loadImage","useState","added","setAdded","refAdded","useRef","colorAdded","showAddingText","currentCA","setCCA","useEffect","last","current","formData","a","discountEndTime","Date","parse","console","log","productStyles","productOperationContainer","productOperationHeader","productAdded","style","color","opacity"],"mappings":"iRA0FMA,EAAsBC,YAAU,CACpCC,KAAM,aACNC,cAF0BF,EA7DL,SAACG,GAAW,IACzBC,EAAqDD,EAArDC,aAAcC,EAAuCF,EAAvCE,SAAUC,EAA6BH,EAA7BG,MAAOC,EAAsBJ,EAAtBI,WAAYC,EAAUL,EAAVK,MAE7CC,EAAa,SAACC,GAAD,OACjB,qBAAKC,UAAWC,IAAOH,WAAvB,SAAoCC,KAGhCG,EAAUC,cAChB,OACE,uBAAMC,SAAUX,EAAcO,UAAWC,IAAOI,UAAhD,UACGP,EAAW,4EACXQ,YAAY,gHAAuB,OAAQC,IAAU,CACpDC,IACAC,MAEDX,EAAW,yFACXQ,YAAY,wFAAmB,cAAeC,IAAU,CAACG,MACzDZ,EAAW,iEACXQ,YAAY,gEAAe,QAASK,IAAO,CAC1CH,IACAI,MAEDd,EAAW,wCACXQ,YAAY,uCAAU,WAAYK,IAAO,CAACE,MAC1Cf,EAAW,wHACXQ,YACC,iHACA,kBACAK,IACA,CAACG,KACD,CAAEC,KAAM,OAAQC,IAAKd,EAASe,MAAOf,IAEtCI,YACC,sFACA,QACAY,IACA,CAACV,IAAeW,IAAaC,IAAqBC,KAClD,CACEC,SAAU,wBACVC,SAAU,IACVC,UAAW,IACXC,SAAU,IACVC,UAAW,IACXC,IAAK,kEAGR9B,GAAS,qBAAKG,UAAWC,IAAO2B,iBAAvB,SAA0C/B,IACpD,qBAAKG,UAAU,GAAf,SACE,wBAAQe,KAAK,SAASc,SAAUnC,GAAYE,EAA5C,0DAIF,qBAAKI,UAAU,GAAf,SACE,wBAAQe,KAAK,SAASc,SAAUnC,GAAYE,EAAYkC,QAASnC,EAAjE,uHA0EOoC,sBACbC,IACAC,aANsB,SAACC,GAAD,MAAY,CAClCC,WAAYD,EAAME,SAASD,cAKF,CAAEE,eAAYC,gBAF1BP,EA7DI,SAAC,GAA8B,IAAD,IAA3BI,EAA2B,EAA3BA,WAAe3C,EAAY,gCACrB+C,oBAAS,GADY,mBACxCC,EADwC,KACjCC,EADiC,KAEzCC,EAAWC,mBAEXC,GAAU,oBACb,EAAO,OADM,eAEb,EAAQ,iBAFK,GAIVC,GAAc,oBACjB,EAAO,mHADU,eAEjB,EAAQ,8IAFS,GAR2B,EAYnBN,oBAAS,GAZU,mBAYxCO,EAZwC,KAY7BC,EAZ6B,KAc/CC,qBAAU,WACHR,EAMHO,GAAO,SAACE,GAAD,OAAWA,KALdP,EAASQ,UACXT,GAAS,GACTM,GAAO,SAACE,GAAD,OAAWA,QAQrB,CAACT,EAAOC,EAAUN,IAErB,IAAM/B,EAAQ,uCAAG,WAAO+C,GAAP,SAAAC,EAAA,6DACXD,EAASE,kBACXF,EAASE,gBAAkBC,KAAKC,MAAMJ,EAASE,kBAFlC,SAKT7D,EAAM6C,WAAN,eACDc,IANU,OAQfT,EAASQ,SAAU,EACnBM,QAAQC,IAAI,oBACZD,QAAQC,IAAIf,EAASQ,SAVN,2CAAH,sDAad,OACE,mCACE,sBAAKlD,UAAW0D,IAAcC,0BAA9B,UACE,oBAAI3D,UAAW0D,IAAcE,uBAA7B,2EACA,qBACE5D,UAAW0D,IAAcG,aACzBC,MAAOtB,EAAQ,CAAEuB,MAAOnB,EAAWE,IAAe,CAAEkB,QAAS,GAF/D,SAIGxB,GAASK,EAAeC,KAE3B,cAAC1D,EAAD,CAAqBgB,SAAUA","file":"static/js/3.4f44170b.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport {\r\n  Input,\r\n  createField,\r\n  ImageField,\r\n  TextArea,\r\n} from \"../FormsControls/FormsControls\";\r\nimport {\r\n  requiredField,\r\n  acceptableName,\r\n  maxLength200,\r\n  acceptablePrice,\r\n  acceptableDiscount,\r\n  acceptableDiscountEndDate,\r\n  validate,\r\n  imageFormat,\r\n  imageHeight_200_4000,\r\n  imageWidth_200_4000,\r\n} from \"../FormsControls/validators\";\r\nimport { connect } from \"react-redux\";\r\nimport { addProduct, loadImage } from \"../../redux/product-reducer\";\r\nimport styles from \"../FormsControls/FormsControls.module.scss\";\r\nimport withAuthRedirect from \"../HOCS/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nimport productStyles from \"./Product.module.scss\";\r\nimport { getStringDate } from \"../../utils/utils\";\r\n\r\nconst addProductForm = (props) => {\r\n  const { handleSubmit, pristine, reset, submitting, error } = props;\r\n\r\n  const fieldDescr = (descName) => (\r\n    <div className={styles.fieldDescr}>{descName}</div>\r\n  );\r\n\r\n  const minDate = getStringDate();\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.wholeForm}>\r\n      {fieldDescr(\"Наименование\")}\r\n      {createField(\"Наименование товара\", \"name\", TextArea, [\r\n        requiredField,\r\n        acceptableName,\r\n      ])}\r\n      {fieldDescr(\"Описание товара\")}\r\n      {createField(\"Описание товара\", \"description\", TextArea, [maxLength200])}\r\n      {fieldDescr(\"Цена товара\")}\r\n      {createField(\"Цена товара\", \"price\", Input, [\r\n        requiredField,\r\n        acceptablePrice,\r\n      ])}\r\n      {fieldDescr(\"Скидка\")}\r\n      {createField(\"Скидка\", \"discount\", Input, [acceptableDiscount])}\r\n      {fieldDescr(\"Дата окончания скидки\")}\r\n      {createField(\r\n        \"Дата окончания акции\",\r\n        \"discountEndTime\",\r\n        Input,\r\n        [acceptableDiscountEndDate],\r\n        { type: \"date\", min: minDate, value: minDate }\r\n      )}\r\n      {createField(\r\n        \"Загрузите фото ...\",\r\n        \"photo\",\r\n        ImageField,\r\n        [requiredField, imageFormat, imageWidth_200_4000, imageHeight_200_4000],\r\n        {\r\n          mimeType: \"image/jpeg, image/png\",\r\n          maxWidth: 4000,\r\n          minHeight: 200,\r\n          minWidth: 200,\r\n          maxHeight: 4000,\r\n          alt: \"Фото товара\",\r\n        }\r\n      )}\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n      <div className=\"\">\r\n        <button type=\"submit\" disabled={pristine || submitting}>\r\n          Создать\r\n        </button>\r\n      </div>\r\n      <div className=\"\">\r\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\r\n          Очистить значения\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddProductReduxForm = reduxForm({\r\n  form: \"addProduct\",\r\n  validate,\r\n})(addProductForm);\r\n\r\nconst AddProduct = ({ isFetching, ...props }) => {\r\n  const [added, setAdded] = useState(false);\r\n  const refAdded = useRef();\r\n\r\n  const colorAdded = {\r\n    [true]: \"red\",\r\n    [false]: \"rebeccapurple\",\r\n  };\r\n  const showAddingText = {\r\n    [true]: \"Товар успешно создан!\",\r\n    [false]: \"Товар в процессе создания...\",\r\n  };\r\n  const [currentCA, setCCA] = useState(true); // change color while create products\r\n\r\n  useEffect(() => {\r\n    if (!added) {\r\n      if (refAdded.current) {\r\n        setAdded(true);\r\n        setCCA((last) => !last); // change color key\r\n      }\r\n    } else {\r\n      setCCA((last) => !last);\r\n    }\r\n    // if product fetching changed -> addProduct method started or ended ->\r\n    // should run effect to check addProduct state -> if addProduct ended ->\r\n    // product added -> else -> submit denied because of request denied\r\n  }, [added, setAdded, isFetching]);\r\n\r\n  const onSubmit = async (formData) => {\r\n    if (formData.discountEndTime) {\r\n      formData.discountEndTime = Date.parse(formData.discountEndTime);\r\n    }\r\n\r\n    await props.addProduct({\r\n      ...formData,\r\n    });\r\n    refAdded.current = true;\r\n    console.log(\"refAdded.current\");\r\n    console.log(refAdded.current);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={productStyles.productOperationContainer}>\r\n        <h1 className={productStyles.productOperationHeader}>Новый товар</h1>\r\n        <div\r\n          className={productStyles.productAdded}\r\n          style={added ? { color: colorAdded[currentCA] } : { opacity: 0 }}\r\n        >\r\n          {added && showAddingText[currentCA]}\r\n        </div>\r\n        <AddProductReduxForm onSubmit={onSubmit} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isFetching: state.products.isFetching,\r\n});\r\n\r\nexport default compose(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, { addProduct, loadImage })\r\n)(AddProduct);\r\n"],"sourceRoot":""}