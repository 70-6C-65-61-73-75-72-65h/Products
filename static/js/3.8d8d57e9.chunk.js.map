{"version":3,"sources":["components/Catalog/AddProduct.jsx"],"names":["AddProductReduxForm","reduxForm","form","validate","props","handleSubmit","pristine","reset","submitting","error","productLink","currentDate","Date","minDate","getYear","getMonth","getDate","onSubmit","className","styles","wholeForm","productStyles","fieldDescr","createField","Input","requiredField","acceptableName","maxLength200","acceptablePrice","acceptableDiscount","acceptableDiscountEndDate","type","min","value","HollowInput","formSummaryError","disabled","onClick","compose","withAuthRedirect","connect","state","submittedImageLink","products","loadedImageLink","addProduct","loadImage","useState","added","setAdded","refAdded","useRef","useEffect","current","first","Array","isArray","console","log","second","productOperationContainer","productOperationHeader","productAdded","formData","image","discountEndTime","parse","photo","localPhoto"],"mappings":"8OAoHMA,EAAsBC,YAAU,CACpCC,KAAM,aACNC,cAF0BF,EAxFL,SAACG,GAAW,IAE/BC,EAMED,EANFC,aACAC,EAKEF,EALFE,SACAC,EAIEH,EAJFG,MACAC,EAGEJ,EAHFI,WACAC,EAEEL,EAFFK,MACAC,EACEN,EADFM,YAGIC,EAAc,IAAIC,KAelBC,EAAO,UAAMF,EAAYG,UAAY,KAA9B,YACXH,EAAYI,WAAa,EAAI,GACzB,IAAMJ,EAAYI,WAAa,EAC/BJ,EAAYI,WAAa,EAHlB,YAKXJ,EAAYK,UAAY,GACpB,IAAML,EAAYK,UAClBL,EAAYK,WAGlB,OACE,uBAAMC,SAAUZ,EAAca,UAAWC,IAAOC,UAAhD,UAEE,qBAAKF,UAAWG,IAAcC,WAA9B,iFACCC,YAAY,4HAAyB,OAAQC,IAAO,CACnDC,IACAC,MAGF,qBAAKR,UAAWG,IAAcC,WAA9B,+GACCC,YAAY,oGAAqB,cAAeC,IAAO,CAACG,MACzD,qBAAKT,UAAWG,IAAcC,WAA9B,uFACCC,YAAY,4EAAiB,QAASC,IAAO,CAC5CC,IACAG,MAEF,qBAAKV,UAAWG,IAAcC,WAA9B,kDACCC,YAAY,uCAAU,WAAYC,IAAO,CAACK,MAC3C,qBAAKX,UAAWG,IAAcC,WAA9B,kIACCC,YACC,iHACA,kBACAC,IACA,CAACM,KACD,CAAEC,KAAM,OAAQC,IAAKnB,EAASoB,MAAOpB,KASrCH,GACAa,YAAY,sFAAsB,QAASW,IAAa,CACtDT,MAGHhB,GAAS,qBAAKS,UAAWC,IAAOgB,iBAAvB,SAA0C1B,IACpD,qBAAKS,UAAU,GAAf,SACE,wBAAQa,KAAK,SAASK,SAAU9B,GAAYE,EAA5C,0DAIF,qBAAKU,UAAU,GAAf,SACE,wBAAQa,KAAK,SAASK,SAAU9B,GAAYE,EAAY6B,QAAS9B,EAAjE,uHAsEO+B,sBACbC,IACAC,aANsB,SAACC,GAAD,MAAY,CAClCC,mBAAoBD,EAAME,SAASC,mBAKV,CAAEC,eAAYC,gBAF1BR,EAzDI,SAAC,GAAsC,IAApCI,EAAmC,EAAnCA,mBAAuBtC,EAAY,wCAC7B2C,oBAAS,GADoB,mBAChDC,EADgD,KACzCC,EADyC,KAEjDC,EAAWC,mBAEjBC,qBAAU,WACHJ,IACEE,EAASG,QAGHH,EAASG,QAAQC,OAASC,MAAMC,QAAQd,IACjDe,QAAQC,IAAI,KACZR,EAASG,QAAU,CAAEM,QAAQ,IACpBT,EAASG,QAAQM,SAAWjB,IACrCe,QAAQC,IAAI,KACZT,GAAS,KAPTQ,QAAQC,IAAI,KACZR,EAASG,QAAU,CAAEC,OAAO,OAS/B,CAACN,EAAOC,EAAUC,EAAUR,IAmB/B,OACE,mCACE,sBAAKxB,UAAWG,IAAcuC,0BAA9B,UACE,oBAAI1C,UAAWG,IAAcwC,uBAA7B,uFACA,qBAAK3C,UAAWG,IAAcyC,aAA9B,SACGd,GAAS,gIAEZ,cAAC,IAAD,CAAW/B,SAZK,SAAC8C,GACrBN,QAAQC,IAAIK,GACZ3D,EAAM0C,UAAUiB,EAASC,UAWrB,cAAChE,EAAD,CACEiB,SA1BS,SAAC8C,GACZA,EAASE,kBAEXF,EAASE,gBAAkBrD,KAAKsD,MAAMH,EAASE,kBAEjD7D,EAAMyC,WAAN,2BACKkB,GADL,IAEEI,MAAOzB,EAAmB,GAC1B0B,WAAY1B,EAAmB,OAmB3BhC,YAAagC","file":"static/js/3.8d8d57e9.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport {\r\n  Input,\r\n  createField,\r\n  ImageForm,\r\n  HollowInput,\r\n  // InputImageLink,\r\n} from \"../FormsControls/FormsControls\";\r\nimport {\r\n  requiredField,\r\n  acceptableName,\r\n  maxLength200,\r\n  acceptablePrice,\r\n  acceptableDiscount,\r\n  acceptableDiscountEndDate,\r\n  validate,\r\n} from \"../FormsControls/validators\";\r\nimport { connect } from \"react-redux\";\r\nimport { addProduct, loadImage } from \"../../redux/product-reducer\";\r\nimport styles from \"../FormsControls/FormsControls.module.scss\";\r\nimport withAuthRedirect from \"../HOCS/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nimport productStyles from \"./Product.module.scss\";\r\n\r\n// can show the summary error\r\n// form-level validation\r\nconst addProductForm = (props) => {\r\n  const {\r\n    handleSubmit,\r\n    pristine,\r\n    reset,\r\n    submitting,\r\n    error,\r\n    productLink,\r\n  } = props;\r\n\r\n  const currentDate = new Date();\r\n  // const currentTime = `${\r\n  //   currentDate.getHours() < 10\r\n  //     ? \"0\" + currentDate.getHours()\r\n  //     : currentDate.getHours()\r\n  // }-${\r\n  //   currentDate.getMinutes() < 10\r\n  //     ? \"0\" + currentDate.getMinutes()\r\n  //     : currentDate.getMinutes()\r\n  // }-${\r\n  //   currentDate.getSeconds() < 10\r\n  //     ? \"0\" + currentDate.getSeconds()\r\n  //     : currentDate.getSeconds()\r\n  // }`;\r\n\r\n  const minDate = `${currentDate.getYear() + 1900}-${\r\n    currentDate.getMonth() + 1 < 10\r\n      ? \"0\" + currentDate.getMonth() + 1\r\n      : currentDate.getMonth() + 1\r\n  }-${\r\n    currentDate.getDate() < 10\r\n      ? \"0\" + currentDate.getDate()\r\n      : currentDate.getDate()\r\n  }`;\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.wholeForm}>\r\n      {/* key, name, price, discount, discountEndTime, photo */}\r\n      <div className={productStyles.fieldDescr}>Имя продукта</div>\r\n      {createField(\"Наименование продукта\", \"name\", Input, [\r\n        requiredField,\r\n        acceptableName,\r\n      ])}\r\n      {/* {createField(\"Фото продукта\", \"photo\", Input, [requiredField])} */}\r\n      <div className={productStyles.fieldDescr}>Описание продукта</div>\r\n      {createField(\"Описание продукта\", \"description\", Input, [maxLength200])}\r\n      <div className={productStyles.fieldDescr}>Цена продукта</div>\r\n      {createField(\"Цена продукта\", \"price\", Input, [\r\n        requiredField,\r\n        acceptablePrice,\r\n      ])}\r\n      <div className={productStyles.fieldDescr}>Скидка</div>\r\n      {createField(\"Скидка\", \"discount\", Input, [acceptableDiscount])}\r\n      <div className={productStyles.fieldDescr}>Дата окончания скидки</div>\r\n      {createField(\r\n        \"Дата окончания акции\",\r\n        \"discountEndTime\",\r\n        Input,\r\n        [acceptableDiscountEndDate],\r\n        { type: \"date\", min: minDate, value: minDate }\r\n      )}\r\n      {/* \r\n      {productLink\r\n        ? createField(\"Фото\", \"photo\", InputImageLink, [requiredField], {\r\n            link: productLink,\r\n          })\r\n        : createField(\"Фото\", \"photo\", InputImageLink, [requiredField])} */}\r\n\r\n      {!productLink &&\r\n        createField(\"Загрузите Фото ...\", \"photo\", HollowInput, [\r\n          requiredField,\r\n        ])}\r\n\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n      <div className=\"\">\r\n        <button type=\"submit\" disabled={pristine || submitting}>\r\n          Создать\r\n        </button>\r\n      </div>\r\n      <div className=\"\">\r\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\r\n          Очистить значения\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddProductReduxForm = reduxForm({\r\n  form: \"addProduct\",\r\n  validate,\r\n})(addProductForm);\r\n\r\nconst AddProduct = ({ submittedImageLink, ...props }) => {\r\n  const [added, setAdded] = useState(false);\r\n  const refAdded = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!added) {\r\n      if (!refAdded.current) {\r\n        console.log(\"1\");\r\n        refAdded.current = { first: true };\r\n      } else if (refAdded.current.first && Array.isArray(submittedImageLink)) {\r\n        console.log(\"2\");\r\n        refAdded.current = { second: true };\r\n      } else if (refAdded.current.second && !submittedImageLink) {\r\n        console.log(\"3\");\r\n        setAdded(true);\r\n      }\r\n    }\r\n  }, [added, setAdded, refAdded, submittedImageLink]);\r\n\r\n  const onSubmit = (formData) => {\r\n    if (formData.discountEndTime) {\r\n      // console.log(formData); // to timestamp\r\n      formData.discountEndTime = Date.parse(formData.discountEndTime);\r\n    }\r\n    props.addProduct({\r\n      ...formData,\r\n      photo: submittedImageLink[0],\r\n      localPhoto: submittedImageLink[1],\r\n    });\r\n  };\r\n\r\n  const onSubmitImage = (formData) => {\r\n    console.log(formData);\r\n    props.loadImage(formData.image);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={productStyles.productOperationContainer}>\r\n        <h1 className={productStyles.productOperationHeader}>Новый продукт</h1>\r\n        <div className={productStyles.productAdded}>\r\n          {added && \"Продукт успешно создан \"}\r\n        </div>\r\n        <ImageForm onSubmit={onSubmitImage} />\r\n        <AddProductReduxForm\r\n          onSubmit={onSubmit}\r\n          productLink={submittedImageLink}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  submittedImageLink: state.products.loadedImageLink,\r\n});\r\n\r\nexport default compose(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, { addProduct, loadImage })\r\n)(AddProduct);\r\n"],"sourceRoot":""}